{
  "_args": [
    [
      {
        "raw": "vss-web-extension-sdk",
        "scope": null,
        "escapedName": "vss-web-extension-sdk",
        "name": "vss-web-extension-sdk",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/aarceo/Projects/hugo-extension"
    ]
  ],
  "_from": "vss-web-extension-sdk@latest",
  "_id": "vss-web-extension-sdk@3.121.0",
  "_inCache": true,
  "_location": "/vss-web-extension-sdk",
  "_nodeVersion": "7.8.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/vss-web-extension-sdk-3.121.0.tgz_1502895052624_0.0551227240357548"
  },
  "_npmUser": {
    "name": "vsalmopen",
    "email": "nugetvss@microsoft.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "vss-web-extension-sdk",
    "scope": null,
    "escapedName": "vss-web-extension-sdk",
    "name": "vss-web-extension-sdk",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/vss-web-extension-sdk/-/vss-web-extension-sdk-3.121.0.tgz",
  "_shasum": "525dbaab8151cce448f1e6aea9c76e0a97428857",
  "_shrinkwrap": null,
  "_spec": "vss-web-extension-sdk",
  "_where": "/Users/aarceo/Projects/hugo-extension",
  "author": {
    "name": "Microsoft"
  },
  "bugs": {
    "url": "https://github.com/Microsoft/vss-web-extension-sdk/issues"
  },
  "dependencies": {
    "@types/jquery": ">=2.0.34",
    "@types/jqueryui": ">=1.11.31",
    "@types/knockout": ">=3.4.38",
    "@types/q": "0.0.32",
    "@types/react": ">=15.3.1",
    "@types/requirejs": ">=2.1.28"
  },
  "description": "Visual Studio Team Services web extension JavaScript library and types.",
  "devDependencies": {
    "typescript": "~2.3.4"
  },
  "directories": {},
  "dist": {
    "shasum": "525dbaab8151cce448f1e6aea9c76e0a97428857",
    "tarball": "https://registry.npmjs.org/vss-web-extension-sdk/-/vss-web-extension-sdk-3.121.0.tgz"
  },
  "gitHead": "6ffc22115501bf923d824d656977ff7841cff06d",
  "homepage": "https://www.visualstudio.com/integrate/extensions/overview",
  "jspm": {
    "main": "lib/VSS.SDK",
    "format": "global"
  },
  "keywords": [
    "extensions",
    "visual studio team services"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "vsalmopen",
      "email": "vsointegration@microsoft.com"
    }
  ],
  "name": "vss-web-extension-sdk",
  "optionalDependencies": {},
  "readme": "# Visual Studio Services Web Extension SDK\r\n\r\n## Overview\r\n\r\nClient SDK and TypeScript declare files for developing [Visual Studio Team Services Extensions](https://www.visualstudio.com/integrate/extensions/overview).\r\n\r\nThe core SDK script, `VSS.SDK.js`, enables web extensions to communicate to the host Team Services frame and to perform operations like initializing, notifying extension is loaded or getting context about the current page.\r\n\r\n> A previous version of the SDK was named `vss-sdk`. Make sure to switch to the new `vss-web-extension-sdk` name.\r\n\r\n## Get the SDK\r\n\r\n1. Download and install [Node.js]((https://nodejs.org/en/download/))\r\n2. Run `npm install vss-web-extension-sdk` from the root of your extension project\r\n\r\nThis will place `VSS.SDK.js` and `VSS.SDK.min.js` in `node_modules/vss-web-extension-sdk/lib/`\r\n\r\n### Include the SDK script on your page\r\n\r\nIf you are developing a web extension, you will need to reference the SDK script from your HTML pages. For example:\r\n\r\n```\r\n<script src=\"lib/VSS.SDK.min.js\"></script>\r\n```\r\n\r\nTo ensure the SDK script is packaged with your extension, update your extension manifest (typically `vss-extension.json`) and add a new entry to `files`:\r\n\r\n```\r\n{       \r\n\t\"files\": [{\r\n\t\t\"path\": \"node_modules/vss-web-extension-sdk/lib\",\r\n\t\t\"addressable\": true,\r\n\t\t\"packagePath\": \"lib\"\r\n\t}]\r\n}\r\n```\r\n\r\nNote: setting `packagePath` is optional, but results in a simpler path for referencing the SDK script from your HTML pages. Not setting a part name would have required you to reference the full path in your `<script>` tag (`src=\"node_modules/vss-web-extension-sdk/lib/VSS.SDK.min.js\"`)\r\n\r\n\r\n## Use the SDK \r\n\r\nFrom your web extension's HTML page, include and initialize the VSS SDK like this:\r\n\r\n```javascript\r\n<script>\r\n\r\n  // Initialize\r\n  VSS.init({\r\n\t  usePlatformScripts: true, \r\n\t  usePlatformStyles: true\r\n  });\r\n\r\n  // Register callback to get called when initial handshake completed\r\n  VSS.ready(function() {\r\n\t  // Start using VSS\r\n  });\r\n\r\n</script>\r\n  ```\r\n      \r\nFull API reference of VSS.SDK.js can be found at [Core Client SDK](https://www.visualstudio.com/docs/integrate/extensions/reference/client/core-sdk) page.\r\n\r\n## Types\r\n\r\nType definitions are provided for:\r\n\r\n * UI controls and client services (see `typings/vss.d.ts`)\r\n * REST clients and contracts for Build, Work, and Code (see `typings/tfs.d.ts`)\r\n * REST clients and contracts for Release Management (see `typings/rmo.d.ts`)\r\n\r\nDependency graph:\r\n\r\n![Dependency Graph](img/dependencies.png)\r\n \r\n### Consuming the types\r\n\r\nFrom a [TypeScript](https://www.typescriptlang.org) 2.0 or later project:\r\n\r\n* Set ```\"moduleResolution\": \"node\"``` in your `tfsconfig.json` project file\r\n\r\nSee [TypeScript Module Resolution](https://www.typescriptlang.org/docs/handbook/module-resolution.html) for more details.\r\n\r\nAlternatively, you can explicitly reference the types at the top of your TypeScript file(s):\r\n\r\n```\r\n    /// <reference types=\"vss-web-extension-sdk\" />\r\n```\r\n\r\n## Organizing your web extension project\r\n\r\nIf you are developing a web extension for Visual Studio Team Service using TypeScript, we recommend the following organization:\r\n\r\n### Project structure\r\n\r\n```\r\n |-- src\r\n     |-- app.ts\r\n     |-- some-module\r\n         |-- a.ts\r\n         |-- b.ts\r\n |-- static\r\n     |-- css\r\n         |-- main.css\r\n     |-- images\r\n         |-- logo.png\r\n     |-- app.html\r\n |-- vss-extension.json\r\n |-- package.json\r\n |-- tsconfig.json\r\n``` \r\n\r\n1. Place TypeScript source files in `src`\r\n2. Place static content (CSS, images, HTML, etc) in `static`\r\n   * This simplifes the process of packaging all necessary static content in your\r\n\r\n### TypeScript project file (`tsconfig.json`)\r\n\r\nDefines the options for compiling your TypeScript files.\r\n\r\n```json\r\n{\r\n    \"compilerOptions\": {\r\n        \"module\": \"amd\",\r\n        \"moduleResolution\": \"node\",\r\n        \"target\": \"es5\",\r\n        \"rootDir\": \"src/\",\r\n        \"outDir\": \"dist/\",\r\n        \"types\": [\r\n            \"vss-web-extension-sdk\"\r\n        ]\t\r\n    }\r\n}\r\n```\r\n\r\n1. After compiling (`tsc -p .`), resulting .js files are placed in `dist`. For example, `dist/app.js`.\r\n\r\n2. If your code directly uses types from other @types modules, you will want to include the module(s) in your package.json and add them to the `types` array. See [@types](http://www.typescriptlang.org/docs/handbook/tsconfig-json.html).\r\n\r\nLearn more about [tsconfig.json](http://www.typescriptlang.org/docs/handbook/tsconfig-json.html)\r\n\r\n### NPM package manifest (`package.json`)\r\n\r\nDeclares the libraries (like the vss-web-extension-sdk) required to compile, package, and use your extension.\r\n\r\n```\r\n{\r\n  /* other details like ID, version, etc are omitted */\r\n  \r\n  \"scripts\": {\r\n    \"build\": \"tsc -p .\",\r\n    \"postbuild\": \"npm run package\",\r\n    \"package\": \"tfx extension create\",\r\n    \"gallery-publish\": \"tfx extension publish --rev-version\",\r\n    \"clean\": \"rimraf ./dist && rimraf ./*.vsix\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"rimraf\": \"^2.5.4\",\r\n    \"tfx-cli\": \"^0.3.45\",\r\n    \"typescript\": \"^2.1.4\"\r\n  },\r\n  \"dependencies\": {\r\n    \"@types/jquery\": \"^2.0.34\",\r\n    \"@types/q\": \"0.0.32\",\r\n    \"vss-web-extension-sdk\": \"^2.109.0\"\r\n  }\r\n}\r\n```\r\n\r\n1. `scripts` provides a convenient way to define common operations that you want to perform on your project, like compiling and packaging. \r\n   * For example, to build (compile) and package your extension, run: `npm run build`. This runs `build` and `postbuild`. If you make a change that doesn't require compiling, you can package by simply running `npm run package`.\r\n   * To package and publish directly to the Marketplace on build, change the `postbuild` script to run the `gallery-publish` script (instead of `package`). You can then run `npm run build -- --token xxxxxx` (where xxxx is you personal access token for publishing to the Marketplace) to build, package, and publish your extension.\r\n   \r\n2. The dependencies on the @types for `jquery` and `q` are only necessary if your TypeScript code is directly referencing either of these types.\r\n\r\nLearn more about [package.json](https://docs.npmjs.com/files/package.json)\r\n\r\n### Extension manifest (`vss-extension.json`)\r\n\r\n```\r\n{\r\n    /* details omitted */\r\n    \"files\": [\r\n        {\r\n            \"path\": \"dist\",\r\n            \"addressable\": true\r\n        },\r\n        {\r\n            \"path\": \"static\",\r\n            \"addressable\": true\r\n        },\r\n        {\r\n            \"path\": \"node_modules/vss-web-extension-sdk/lib\",\r\n            \"addressable\": true,\r\n            \"packagePath\": \"lib\"\r\n        }\r\n    ],\r\n    \"contributions\": [\r\n        {\r\n            \"id\": \"my-hub\",\r\n            \"type\": \"ms.vss-web.hub\",\r\n            \"properties\": {\r\n                \"name\": \"Hub\",\r\n                \"uri\": \"static/app.html\"\r\n            }\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n1. The compiled JavaScript files (placed into `dist` by your `tsconfig.json`) will be packaged into the `dist` folder of the extension package.\r\n\r\n2. The VSS SDK scripts will be packaged into the `lib` folder of the extension package.\r\n\r\nLearn more about the [extension manifest](https://www.visualstudio.com/docs/integrate/extensions/develop/manifest).\r\n\r\n### HTML page\r\n\r\n```html\r\n\r\n<head>\r\n   <script src=\"../lib/VSS.SDK.min.js\"></script>\r\n   <!-- \r\n        Alternatively, if the packagePath attribute is not set for this file in your extension manifest (see above), do this:\r\n         <script src=\"../node_modules/vss-web-extension-sdk/lib/VSS.SDK.min.js\"></script>\r\n   -->\r\n</head>\r\n\r\n<body>\r\n\r\n <script type=\"text/javascript\">\r\n\r\n        // Initialize the VSS sdk\r\n        VSS.init({\r\n            usePlatformScripts: true,\r\n            usePlatformStyles: true\r\n        });\r\n\t\r\n\tVSS.require([\"dist/app\"], function (app) { \r\n\t    ...\r\n\t});\r\n\r\n </script>\r\n\r\n</body>\r\n```\r\n\r\n## Code of Conduct\r\n\r\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Microsoft/vss-web-extension-sdk.git"
  },
  "scripts": {
    "build": "tsc -p .",
    "prepublish": "npm run build"
  },
  "types": "./typings/index.d.ts",
  "version": "3.121.0"
}
